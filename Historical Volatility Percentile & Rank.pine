// This Pine Script‚Ñ¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© balipour
//@version=5

// Function to find the minimum value in an array over a lookback period
f_min(x, n) =>
    min = nz(x[1]), c = 0.0
    while n > c
        if min > x[c]
            min := x[c]
        c := c + 1
    min

// Function to find the maximum value in an array over a lookback period
f_max(x, n) =>
    max = nz(x[1]), c = 0.0
    while n > c
        if max < x[c]
            max := x[c]
        c := c + 1
    max

// Function to calculate the percentile of a value in an array over a lookback period
f_percentile(x, n) =>
    p = 0, c = 0
    while n > c
        if x > x[c + 1]
            p := p + 1
        c := c + 1
    per = 100 * (p / n)

// Function to calculate the rank of a value in an array over a lookback period
f_rank(x, n) =>
    l = f_min(x, n), h = f_max(x, n)
    rank = 100 * ((x - l) / (h - l))

// Function to calculate the moving average
f_m(x, n) =>
    m = 0.0
    m := ((n - 1) / n) * nz(m[1]) + x / n

// Function to calculate the standard deviation
f_sd(x, n) =>
    s = f_m(x * x, n)
    m = f_m(x, n)
    sd = math.sqrt(s - m * m)

// Function to calculate the normalized moving average
f_nm(x, n) =>
    nm = 0.0
    nm := nz(nm[1]) + (x - nz(x[n])) / n

// Function to calculate the normalized standard deviation
f_nsd(x, n) =>
    s = f_nm(x * x, n)
    m = f_nm(x, n)
    sd = math.sqrt(s - m * m)

// Function to determine color based on percentile value
f_color0(x) =>
    c = color.rgb(26, 112, 178)
    if x >= 70 and x < 80
        c := color.rgb(255, 230, 0)
    else if x >= 80 and x < 90
        c := color.rgb(210, 126, 0)
    else if x >= 90
        c := color.rgb(255, 0, 0)
    c

// Function to determine color based on rank value
f_color1(x) =>
    c = #545454
    if x >= 70 and x < 80
        c := color.rgb(255, 230, 0)
    else if x >= 80 and x < 90
        c := color.rgb(210, 126, 0)
    else if x >= 90
        c := color.rgb(255, 0, 0)
    c

// Indicator settings and input options
indicator("üí§ HV(P&R)¬©Ô∏è [TEP‚Ñ¢Ô∏è]")

op0 = input(true, "Closes Only?")
x0 = op0 ? close : open < close ? high : close < open ? low : close
op1 = input.string("HVP¬©Ô∏è", title="Mode? ", options=["HVP¬©Ô∏è", "HVR¬©Ô∏è"]) == "HVP¬©Ô∏è"

n0 = input.int(30, title="Lookback for Volatility: ")
n1 = input.int(365, title="Lookback for Percentile/Rank: ")
n2 = input.int(30, "Lookback for MA: ")

op2 = input(true, "Enable Background")

// Calculate log returns
r = math.log(x0 / nz(x0[1]))

// Color settings for background
c0 = color.new(#38b624, 70)
c1 = color.new(#32ab20, 60)
c2 = color.new(#31ff12, 50)

// Calculate historical volatility
hv = f_sd(r, n0)

// Calculate historical volatility percentile and rank
hvp = f_percentile(hv, n1)
hvr = f_rank(hv, n1)

// Calculate moving average and standard deviation for percentile and rank
hvp_m = math.exp(f_m(math.log(hvp), n2))
hvp_sd = math.exp(f_sd(math.log(hvp), n2))
hvp_se = math.exp(f_sd(math.log(hvp), n2) / math.sqrt(n2))

hvr_m = math.exp(f_m(math.log(hvr), n2))
hvr_sd = math.exp(f_sd(math.log(hvr), n2))
hvr_se = math.exp(f_sd(math.log(hvr), n2) / math.sqrt(n2))

// Determine color gradients based on percentile and rank values
c4 = color.from_gradient(hvp, 0, hvp_m / hvp_sd, color.rgb(13, 255, 0), color.rgb(0, 145, 0)) 
con0 = hvp < hvp_m / hvp_sd

c5 = color.from_gradient(hvr, 0, hvr_m / hvr_sd, color.rgb(13, 255, 0), color.rgb(0, 145, 0)) 
con1 = hvr < hvr_m / hvr_sd

// Plot settings for HVP and HVR
plot(op1 ? con0 ? hvp : na : na, style=plot.style_columns, color=c4, title="Local Extreme Low")
plot(op1 ? hvp : na, style=plot.style_histogram, color=f_color0(hvp), title="HVP¬©Ô∏è", linewidth=2)
plot(op1 ? hvp_m : na, style=plot.style_line, color=color.white, title="MA", linewidth=2)
plot(op1 ? hvp_m * hvp_se : na, style=plot.style_line, color=color.white, title="+SE")
plot(op1 ? hvp_m / hvp_se : na, style=plot.style_line, color=color.white, title="-SE")

plot(not op1 ? con1 ? hvr : na : na, style=plot.style_columns, color=c5, title="Local Extreme Low")
plot(not op1 ? hvr : na, style=plot.style_histogram, color=f_color1(hvr), title="HVR¬©Ô∏è", linewidth=2)
plot(not op1 ? hvr_m : na, style=plot.style_line, color=color.white, title="MA", linewidth=2)
plot(not op1 ? hvr_m * hvr_se : na, style=plot.style_line, color=color.white, title="+SE")
plot(not op1 ? hvr_m / hvr_se : na, style=plot.style_line, color=color.white, title="-SE")

// Background color settings based on HVP and HVR values
bgcolor(op1 ? op2 ? hvp <= 5 and hvp > 3 ? c0 : hvp <= 3 and hvp > 1 ? c1 : hvp <= 1 ? c2 : na : na : na)
bgcolor(not op1 ? op2 ? hvr <= 5 and hvr > 3 ? c0 : hvr <= 3 and hvr > 1 ? c1 : hvr <= 1 ? c2 : na : na : na)
